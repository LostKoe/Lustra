@use "../shared/variables";
@use "../shared/mixins";

$_btn-colors: (
    primary: (bg: variables.$primary, text: variables.$light, goDarker: true),
    secondary: (bg: variables.$secondary, text: variables.$light, goDarker: true),
    warning: (bg: variables.$warning, text: variables.$dark, goDarker: false),
    danger: (bg: variables.$danger, text: variables.$light, goDarker: true),
    success: (bg: variables.$success, text: variables.$light, goDarker: true),
    info: (bg: variables.$info, text: variables.$dark, goDarker: false),
    dark: (bg: variables.$dark, text: variables.$light, goDarker: false),
    light: (bg: variables.$light, text: variables.$dark, goDarker: true),
);

$_btn-size: (
    sm: 0.5rem,
    md: 1rem,
    lg: 1.5rem,
    xl: 2rem,
    xxl: 2.5rem,
);

$_btn-outline: (
    primary: (bg: variables.$primary, text: variables.$light),
    secondary: (bg: variables.$secondary, text: variables.$light),
    warning: (bg: variables.$warning, text: variables.$dark),
    danger: (bg: variables.$danger, text: variables.$light),
    success: (bg: variables.$success, text: variables.$light),
    info: (bg: variables.$info, text: variables.$dark),
    light: (bg: variables.$light, text: variables.$dark),
    dark: (bg: variables.$dark, text: variables.$light),
);

.btn {
    @include mixins.border(none, 0.5rem);
    @include mixins.padding-x(2rem);
    @include mixins.padding-y(0.5rem);
    @include mixins.margin-y(0.5rem);
    background: transparent;
    cursor: pointer;
    font-size: 1rem;
    text-align: center;
    transition: filter 0.2s, background 0.2s, color 0.2s;

    &-link {
        background: transparent;
        color: variables.$primary;
        text-decoration: underline;
    }

    &-block {
        @include mixins.auto-width(100%, 0.5rem)
    }

    &-group {
        display: flex;

        .btn {
            box-shadow: none;
            margin: 0;
            @include mixins.border(none, 0);

            &:first-child {
                border-radius: .5rem 0 0 .5rem;
            }

            &:last-child {
                border-radius: 0 .5rem .5rem 0;
            }
        }

        &-vertical {
            display: flex;
            flex-direction: column;
            width: max-content;

            .btn {
                box-shadow: none;
                margin: 0;
                @include mixins.border(none, 0);

                &:first-child {
                    border-radius: .5rem .5rem 0 0;
                }

                &:last-child {
                    border-radius: 0 0 .5rem .5rem;
                }
            }
        }
    }
}

@each $name, $props in $_btn-colors {
    .btn-#{$name} {
        background: map-get($props, bg);
        color: map-get($props, text);
        box-shadow: 0 0 15px -1px rgba(0, 0, 0, 0.2);

        &:hover {
            @if map-get($props, goDarker) {
                filter: brightness(95%);
            }
            @else {
                filter: brightness(105%);
            }
        }

        &:active {
            @if map-get($props, goDarker) {
                filter: brightness(85%);
            }
            @else {
                filter: brightness(115%);
            }
        }

        &.btn-active {
            pointer-events: none;

            @if map-get($props, goDarker) {
                filter: brightness(85%);
            }
            @else {
                filter: brightness(115%);
            }
        }
    }
}

@each $size, $value in $_btn-size {
    .btn-#{$size} {
        font-size: $value;
        @include mixins.padding-y($value * 0.5);
        @include mixins.padding-x($value * 2);
        @include mixins.border(none, $value * 0.5);
    }
}

@each $name, $colors in $_btn-outline {
    .btn-outline-#{$name} {
        background: transparent;
        color: map-get($colors, bg);
        border: 2px solid map-get($colors, bg);

        &:hover {
            background: map-get($colors, bg);
            color: map-get($colors, text);
            filter: brightness(100%);
        }
    }
}
